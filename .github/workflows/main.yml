name: Wails React App CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          check-latest: true

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      # Install Wails
      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      # Run frontend tests
      - name: Run frontend tests
        run: |
          cd frontend
          echo "Running frontend tests"

      # Run backend tests
      - name: Run backend tests
        run: go test ./... -v

      # Build the application
      - name: Build
        run: wails build

    # Upload artifacts
    - name: Upload Windows build
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: build/bin/
        retention-days: 5
        compression-level: 6 # Optional: Better compression for binaries  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # Install Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

    # Run ESLint
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint      # Run Go linter
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Scan for frontend vulnerabilities
      - name: Run npm audit
        run: |
          cd frontend
          npm audit

      # Scan Go code for security issues
      - name: Run gosec
        uses: securego/gosec@master
        with:
          args: ./...
